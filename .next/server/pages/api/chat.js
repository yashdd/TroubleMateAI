"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat";
exports.ids = ["pages/api/chat"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_chat_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\chat.ts */ \"(api-node)/./pages/api/chat.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_chat_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/chat\",\n        pathname: \"/api/chat\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_chat_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGY2hhdCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDY2hhdC50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUNrRDtBQUNsRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsK0NBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLCtDQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGNoYXQudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXRcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/chat.ts":
/*!***************************!*\
  !*** ./pages/api/chat.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ioredis */ \"ioredis\");\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ioredis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_supabaseClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/supabaseClient */ \"(api-node)/./utils/supabaseClient.ts\");\n\n\nconst redis = new (ioredis__WEBPACK_IMPORTED_MODULE_0___default())(process.env.REDIS_URL);\nconst FAISS_API_URL = process.env.BACKEND_URL;\n// const HF_API_URL = 'https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2';\n// const HF_API_KEY = process.env.HUGGINGFACE_API_KEY!;\nconst GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';\nconst GROQ_API_KEY = process.env.GROQ_API_KEY;\nasync function queryFaiss(query) {\n    const res = await fetch(FAISS_API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            query\n        })\n    });\n    if (!res.ok) return [];\n    const data = await res.json();\n    return data.results || [];\n}\nfunction buildPrompt(query, docs, history = []) {\n    let historyText = '';\n    if (history.length > 0) {\n        historyText = history.map((msg)=>`${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`).join('\\n');\n    }\n    const context = docs.map((d, i)=>`Context ${i + 1}: ${d.text}`).join('\\n\\n');\n    console.log(\"Context for LLM:\", context);\n    return `You are an expert DevOps engineer and system administrator with 10+ years of experience. You specialize in troubleshooting, infrastructure management, and providing clear, actionable solutions.\n\nIMPORTANT: Always structure your responses in this format:\n1. Problem Analysis - Briefly identify the issue\n2. Root Cause - Explain what's causing the problem\n3. Solution Steps - Provide step-by-step instructions\n4. Verification - How to confirm the fix worked\n5. Prevention - How to avoid this issue in the future\n\nUse the following context information to provide a comprehensive answer:\n\n${context}\n\n${historyText ? 'Conversation history:\\n' + historyText + '\\n' : ''}Question: ${query}\n\nIf the user's question is not related to DevOps, system administration, cloud, infrastructure, CI/CD, Linux, troubleshooting, or similar technical topics, reply strictly with: \"I am a DevOps assistant. Please ask relevant questions.\"\n\nProvide a detailed, professional response following the structure above if the question is relevant. Include specific commands, code examples, and best practices where relevant.`;\n}\nasync function queryGroq(prompt) {\n    const res = await fetch(GROQ_API_URL, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            model: \"llama-3.3-70b-versatile\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: `You are an expert DevOps engineer and system administrator with extensive experience in:\n- Linux/Unix systems administration\n- Docker and containerization\n- Kubernetes orchestration\n- CI/CD pipelines\n- Cloud platforms (AWS, Azure, GCP)\n- Infrastructure as Code (Terraform, Ansible)\n- Monitoring and logging (Prometheus, ELK stack)\n- Network troubleshooting\n- Security best practices\n\nYour responses should be:\n- Professional and authoritative\n- Well-structured with clear sections\n- Include specific commands and code examples\n- Focus on practical, actionable solutions\n- Explain the reasoning behind recommendations\n- Consider security implications\n- Provide verification steps\n- For \"Hi Hello\" type of questions, just say \"Hello, how can I help you today?\"\n- For \"How are you\" type of questions, just say \"I'm doing great, thank you for asking!\"\n- For \"What is your name\" type of questions, just say \"I'm Troublemate AI, your AI assistant!\"\n- For \"What is your purpose\" type of questions, just say \"I'm here to help you with your DevOps and system administration questions!\"\n- For \"What is your favorite color\" type of questions, just say \"I'm a helpful AI assistant, not a color!\"\n- For \"What is your favorite food\" type of questions, just say \"I'm a helpful AI assistant, not a food!\"\n- For \"What is your favorite animal\" type of questions, just say \"I'm a helpful AI assistant, not an animal!\"\n- For \"What is your favorite movie\" type of questions, just say \"I'm a helpful AI assistant, not a movie!\"\n\nAlways prioritize safety and best practices in your recommendations.`\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            max_tokens: 800,\n            temperature: 0.2\n        })\n    });\n    const json = await res.json();\n    return json.choices?.[0]?.message?.content?.trim() || \"Sorry, no answer.\";\n}\nfunction formatAnswer(text) {\n    return text// Clean up the text first\n    .trim()// Fix section headers with plain text formatting\n    .replace(/^1\\.\\s?\\*\\*Problem Analysis\\*\\*:?\\s*/gim, '\\n\\nProblem Analysis\\n\\n').replace(/^1\\.\\s?Problem Analysis:?\\s*/gim, '\\n\\nProblem Analysis\\n\\n').replace(/^2\\.\\s?\\*\\*Root Cause\\*\\*:?\\s*/gim, '\\n\\nRoot Cause\\n\\n').replace(/^2\\.\\s?Root Cause:?\\s*/gim, '\\n\\nRoot Cause\\n\\n').replace(/^3\\.\\s?\\*\\*Solution Steps\\*\\*:?\\s*/gim, '\\n\\nSolution Steps\\n\\n').replace(/^3\\.\\s?Solution Steps:?\\s*/gim, '\\n\\nSolution Steps\\n\\n').replace(/^4\\.\\s?\\*\\*Verification\\*\\*:?\\s*/gim, '\\n\\nVerification\\n\\n').replace(/^4\\.\\s?Verification:?\\s*/gim, '\\n\\nVerification\\n\\n').replace(/^5\\.\\s?\\*\\*Prevention\\*\\*:?\\s*/gim, '\\n\\nPrevention\\n\\n').replace(/^5\\.\\s?Prevention:?\\s*/gim, '\\n\\nPrevention\\n\\n')// Remove markdown formatting\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1').replace(/\\*(.*?)\\*/g, '$1').replace(/^##\\s+/gm, '\\n\\n').replace(/^###\\s+/gm, '\\n\\n')// Fix bullet points\n    .replace(/^[-*]\\s+/gm, '• ')// Fix numbered lists\n    .replace(/^(\\d+)\\.\\s+/gm, '$1. ')// Clean up excessive whitespace\n    .replace(/\\n{3,}/g, '\\n\\n').replace(/\\s+$/gm, '')// Ensure proper spacing around headers\n    .replace(/\\n##/g, '\\n\\n##').replace(/\\n###/g, '\\n\\n###').trim();\n}\nasync function handler(req, res) {\n    console.log(\"METHOD:\", req.method);\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Only POST requests allowed'\n        });\n    }\n    const { query, user_id } = req.body;\n    if (!user_id) return res.status(400).json({\n        error: 'User ID required'\n    });\n    if (!query || typeof query !== 'string') {\n        return res.status(400).json({\n            error: 'Invalid query'\n        });\n    }\n    try {\n        // Fetch last 4 messages (2 user+assistant pairs) for this user\n        const { data: chatHistory, error: historyError } = await _utils_supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from('chats').select('question,answer').eq('user_id', user_id).order('id', {\n            ascending: false\n        }).limit(2);\n        let history = [];\n        if (chatHistory && chatHistory.length > 0) {\n            // Each chatHistory row is a user question and assistant answer\n            // Reverse to chronological order\n            history = chatHistory.reverse().flatMap((row)=>[\n                    {\n                        role: 'user',\n                        content: row.question\n                    },\n                    {\n                        role: 'assistant',\n                        content: row.answer\n                    }\n                ]);\n        }\n        // Check for simple greetings first\n        const lowerQuery = query.toLowerCase().trim();\n        const greetings = [\n            'hi',\n            'hello',\n            'hey',\n            'good morning',\n            'good afternoon',\n            'good evening'\n        ];\n        const howAreYou = [\n            'how are you',\n            'how are you doing',\n            'how do you do'\n        ];\n        const nameQuestions = [\n            'what is your name',\n            'what\\'s your name',\n            'who are you'\n        ];\n        const purposeQuestions = [\n            'what is your purpose',\n            'what do you do',\n            'what can you do'\n        ];\n        const favoriteQuestions = [\n            'what is your favorite color',\n            'what is your favorite food',\n            'what is your favorite animal',\n            'what is your favorite movie'\n        ];\n        let directAnswer = '';\n        if (greetings.some((greeting)=>lowerQuery.includes(greeting))) {\n            directAnswer = 'Hello, how can I help you today?';\n        } else if (howAreYou.some((phrase)=>lowerQuery.includes(phrase))) {\n            directAnswer = 'I\\'m doing great, thank you for asking!';\n        } else if (nameQuestions.some((phrase)=>lowerQuery.includes(phrase))) {\n            directAnswer = 'I\\'m Troublemate AI, your AI assistant!';\n        } else if (purposeQuestions.some((phrase)=>lowerQuery.includes(phrase))) {\n            directAnswer = 'I\\'m here to help you with your DevOps and system administration questions!';\n        } else if (favoriteQuestions.some((phrase)=>lowerQuery.includes(phrase))) {\n            directAnswer = 'I\\'m a helpful AI assistant, not a person with favorites!';\n        }\n        if (directAnswer) {\n            // Cache the direct answer\n            await redis.set(query, directAnswer, 'EX', 60 * 60 * 24); // 24h\n            await _utils_supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from('chats').insert([\n                {\n                    user_id,\n                    question: query,\n                    answer: directAnswer\n                }\n            ]);\n            return res.status(200).json({\n                formattedAnswer: directAnswer,\n                source: 'direct'\n            });\n        }\n        // 1. Redis cache\n        const cached = await redis.get(query);\n        console.log(\"Checking Redis\");\n        if (cached) return res.status(200).json({\n            answer: cached,\n            source: 'cache'\n        });\n        // 2. FAISS search\n        let results = [];\n        try {\n            console.log(\"Querying FAISS with:\");\n            results = await queryFaiss(query);\n        } catch (err) {\n            console.warn('FAISS query failed', err);\n        }\n        let prompt = query;\n        let source = 'llm';\n        if (results.length > 0) {\n            prompt = buildPrompt(query, results, history);\n            source = 'faiss+llm';\n        } else {\n            prompt = buildPrompt(query, [], history);\n        }\n        // 3. Query GROK LLM\n        const answer = await queryGroq(prompt);\n        console.log(\"Generated answer:\", answer);\n        // 4. Cache answer\n        await redis.set(query, answer, 'EX', 60 * 60 * 24); // 24h\n        const formattedAnswer = formatAnswer(answer);\n        await _utils_supabaseClient__WEBPACK_IMPORTED_MODULE_1__.supabase.from('chats').insert([\n            {\n                user_id,\n                question: query,\n                answer: formattedAnswer\n            }\n        ]);\n        res.status(200).json({\n            formattedAnswer,\n            source\n        });\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({\n            error: 'Internal server error'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/chat.ts\n");

/***/ }),

/***/ "(api-node)/./utils/supabaseClient.ts":
/*!*********************************!*\
  !*** ./utils/supabaseClient.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"cross-fetch\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst supabaseUrl = \"https://cgnpujgxbcbmkuflruok.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNnbnB1amd4YmNibWt1ZmxydW9rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE0Njk1OTMsImV4cCI6MjA2NzA0NTU5M30.bq5C6-HpOa7GrOyK0PB7cdVvqOiJRD0pk0Prh_10mU8\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey, {\n    global: {\n        fetch: (cross_fetch__WEBPACK_IMPORTED_MODULE_1___default())\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3V0aWxzL3N1cGFiYXNlQ2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFEO0FBQ3JCO0FBRWhDLE1BQU1FLGNBQWNDLDBDQUFvQztBQUN4RCxNQUFNRyxjQUFjSCxrTkFBeUM7QUFFdEQsTUFBTUssV0FBV1IsbUVBQVlBLENBQUNFLGFBQWFJLGFBQWE7SUFDN0RHLFFBQVE7UUFBRVIsS0FBS0Esc0RBQUFBO0lBQUM7QUFDbEIsR0FBRyIsInNvdXJjZXMiOlsiRDpcXFRyb3VibGVNYXRlQUlcXHV0aWxzXFxzdXBhYmFzZUNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xyXG5pbXBvcnQgZmV0Y2ggZnJvbSAnY3Jvc3MtZmV0Y2gnO1xyXG5cclxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhO1xyXG5jb25zdCBzdXBhYmFzZUtleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZITtcclxuXHJcbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VLZXksIHtcclxuICBnbG9iYWw6IHsgZmV0Y2ggfVxyXG59KTtcclxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsImZldGNoIiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VLZXkiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsInN1cGFiYXNlIiwiZ2xvYmFsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./utils/supabaseClient.ts\n");

/***/ }),

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "cross-fetch":
/*!******************************!*\
  !*** external "cross-fetch" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("cross-fetch");

/***/ }),

/***/ "ioredis":
/*!**************************!*\
  !*** external "ioredis" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("ioredis");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cchat.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();